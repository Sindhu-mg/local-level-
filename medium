01.lowest common ancestor
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def LowestCommonAncestor(root, p, q):
    if not root:
        return None
    if p.val < root.val and q.val < root.val:
        return LowestCommonAncestor(root.left, p, q)
    elif p.val > root.val and q.val > root.val:
        return LowestCommonAncestor(root.right, p, q)
    else:
        return root
root = TreeNode(6)
root.left = TreeNode(2)
root.right = TreeNode(8)
root.left.left = TreeNode(0)
root.left.right = TreeNode(4)
root.right.left = TreeNode(7)
root.right.right = TreeNode(9)
root.left.right.left = TreeNode(3)
root.left.right.right = TreeNode(5)

p = root.left
q = root.right
lca = LowestCommonAncestor(root, p, q)

print(f"Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = {p.val}, q = {q.val}")
print(f"Output: {lca.val}")

Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8
Output: 6

02.
def majority_elements(nums):
    candidate1, count1 = 0, 0
    candidate2, count2 = 0, 0

    for num in nums:
        if num == candidate1:
            count1 += 1
        elif num == candidate2:
            count2 += 1
        elif count1 == 0:
            candidate1, count1 = num, 1
        elif count2 == 0:
            candidate2, count2 = num, 1
        else:
            count1 -= 1
            count2 -= 1
            
    count1 = count2 = 0
    for num in nums:
        if num == candidate1:
            count1 += 1
        elif num == candidate2:
            count2 += 1
    result = []
    if count1 > len(nums) // 3:
        result.append(candidate1)
    if count2 > len(nums) // 3:
        result.append(candidate2)

    return result
nums1 = [3, 2, 3]
result1 = majority_elements(nums1)
print(f"Input: {nums1}\nOutput: {result1}")

nums2 = [1]
result2 = majority_elements(nums2)
print(f"\nInput: {nums2}\nOutput: {result2}")

Input: [3, 2, 3]
Output: [3]

Input: [1]
Output: [1]

03.


