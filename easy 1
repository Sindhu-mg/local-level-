Easy
#1st Question answer
#
#include <stdio.h>
#include <string.h>

int lengthOfLastWord(char* s) {
    int len = strlen(s);
    int count = 0;

    for(int i = len - 1; i >= 0; i--) {
        if(s[i] != ' ') {
            count++;
        } else if(count > 0) {
            break;
        }
    }

    return count;
}

int main() {
    char s[] = "Hello World";
    printf("%d\n", lengthOfLastWord(s));

    char t[] = "   fly me   to   the moon  ";
    printf("%d\n", lengthOfLastWord(t));

    char u[] = "luffy is still joyboy";
    printf("%d\n", lengthOfLastWord(u));

    return 0;
}

#2nd qn answer
#Binary search tree
class treenode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
def sortedArrayToBST(nums, left, right):
    if left > right:
        return None
    
    mid = (left + right) // 2
    root = treenode(nums[mid])
    
    root.left = sortedArrayToBST(nums, left, mid - 1)
    root.right = sortedArrayToBST(nums, mid + 1, right)
    
    return root
def inorderTraversal(root):
    if root:
        inorderTraversal(root.left)
        print(root.val, end=" ")
        inorderTraversal(root.right)
        
nums = [-10, -3, 0, 5, 9]
size = len(nums)
root = sortedArrayToBST(nums, 0, size - 1)

print("Inorder Traversal:", end=" ")
inorderTraversal(root)
OUTPUT:Inorder Traversal = 0,-3,-10,null,5

#3rd question answer
def generate_pascals_triangle(numRows):
    triangle = []

    for i in range(numRows):
        row = [1] * (i + 1)
        for j in range(1, i):
            row[j] = triangle[i - 1][j - 1] + triangle[i - 1][j]

        triangle.append(row)

    return triangle


numRows_1 = 5
numRows_2 = 1

output_1 = generate_pascals_triangle(numRows_1)

print(f"Input: numRows = {numRows_1}")
print(f"Output: {output}")










